C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: D:\Keil_V5\C51\BIN\C51.EXE Main.c COMPACT OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\air LCD remote) DE
                    -BUG TABS(2)

line level    source

   1          /*********************************************************************
   2          
   3          功能:
   4            标签TAG运行程序
   5          
   6          说明:
   7              1.标签主动发送自身信息（ID编号 + 射频发送信号强度）
   8            2.标签有两种状态可切换:   
   9                                   状态1：常规主动发送（休眠-接收-发送）
  10                           状态2：被动接收（休眠-接收）
  11          
  12          **********************************************************************/
  13          
  14          
  15          #include <Nordic\reg24le1.h>
  16          #include <stdint.h>
  17          #include "API.h"
  18          #include <absacc.h>
  19          
  20          #define PIN32
  21          #ifdef  PIN32
  22          #define p0dir 0xF0
  23          #define p1dir 0xF7
  24          #endif
  25          
  26          #define LED0 P13
  27          
  28          #define ID_MEMORY_BASE  0xFC00
  29          #define ID_LENGTH        9        //前8个字节为序列号，第9个字节固定为0XA5表示已写入ID
  30          
  31          #define eddr            0xFA00    //设定射频功率值所在NVM存储器地址
  32          
  33          #define SEND_CYCLE      2  //发送次数
  34          
  35          
  36          #define INTERRUPT_RFIRQ 9
  37          #define INTERRUPT_TICK  13  
  38          
  39          #define TX_ADR_WIDTH    8             // RF收发地址共8 bytes 
  40          #define TX_PLOAD_WIDTH  32            // 数据包长度为32 bytes
  41          #define RX_PLOAD_WIDTH  32            // 数据包长度为9 bytes
  42          
  43          uint8_t const TX_ADDRESS[TX_ADR_WIDTH]  = {0xD2,0xF8,0xD0,0xD0,0xBD,0xA3,0xBF,0xCD}; //定义RF发送地址
  44          uint8_t const RX_ADDRESS[TX_ADR_WIDTH]  = {0xD0,0xEC,0xC8,0xB5,0xC7,0xBF,0x51,0x51};       //定义RF接收地址
  45          
  46          uint8_t data uid=0x03;      //本标签的ID号(自己烧录)
  47          uint8_t data txpower=0x0f;    //标签射频发射功率
  48          uint8_t data rx_buf[RX_PLOAD_WIDTH];
  49          uint8_t data tx_buf[TX_PLOAD_WIDTH]={0x00, 0x00, 0x11, 0x22, 0x33, 0x66, 0x03, 0x00, 0x00, 0x00, 
  50                                               0x23, 0x59, 0x13, 0x14, 0x15, 0x16, 0xFF, 0x01, 0x01, 0x01, 
  51                                               0x00, 0x81, 0x85, 0x08, 0x0F, 0x20, 0x22, 0x00, 0x00, 0x00,
  52                                               0x00, 0x00};
  53          
  54          /*
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 2   

  55          
  56          信号强度   1字节
  57          电量       1字节
  58          卡号       4字节                                     
  59          时间段模式 1字节
  60          前后门     1字节
  61          每日时段   4字节
  62          结束日期   4字节
  63          星期       1字节
  64          楼层权限   12字节
  65          保留       3字节
  66          */                                     
  67                                               
  68                                               
  69          uint8_t bdata sta;
  70          sbit  RX_DR =sta^6;
  71          sbit  TX_DS =sta^5;
  72          sbit  MAX_RT  =sta^4;
  73          
  74          /**************************************************
  75          功能：延时
  76          **************************************************/
  77          void delay(uint16_t x)
  78          {
  79   1          uint16_t i,j;
  80   1          i=0;
  81   1          for(i=0;i<x;i++)
  82   1          {
  83   2             j=108;
  84   2                 ;
  85   2             while(j--);
  86   2          }
  87   1      }
  88          /**************************************************
  89          功能：硬件SPI读写
  90          **************************************************/
  91          uint8_t SPI_RW(uint8_t value)
  92          {
  93   1        SPIRDAT = value;
  94   1                                     
  95   1        while(!(SPIRSTAT & 0x02));            // 等待SPI传输完成
  96   1      
  97   1        return SPIRDAT;                       // 返回读出值
  98   1      }
  99          /**************************************************
 100          功能：写RF寄存器，读RF状态值
 101          **************************************************/
 102          uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value)
 103          {
 104   1        uint8_t status;
 105   1      
 106   1          RFCSN = 0;                    
 107   1          status = SPI_RW(reg);               // 选择RF寄存器
 108   1          SPI_RW(value);                      // 写入数据
 109   1          RFCSN = 1;                    
 110   1      
 111   1          return(status);                     // 返回RF状态值
 112   1      }
 113          /**************************************************
 114          功能：读RF寄存器
 115          **************************************************/
 116          uint8_t SPI_Read(uint8_t reg)
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 3   

 117          {
 118   1        uint8_t reg_val;
 119   1      
 120   1          RFCSN = 0;                      
 121   1          SPI_RW(reg);                      // 选择RF寄存器
 122   1          reg_val = SPI_RW(0);              // 读出数据
 123   1          RFCSN = 1;                      
 124   1      
 125   1          return(reg_val);                  // 返回RF状态值
 126   1      }
 127          
 128          /**************************************************
 129          功能：读RF寄存器多字节数据到缓冲区
 130          **************************************************/
 131          uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes)
 132          {
 133   1        uint8_t status,byte_ctr;
 134   1      
 135   1          RFCSN = 0;                        
 136   1          status = SPI_RW(reg);               // 选择RF寄存器
 137   1      
 138   1          for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 139   1            pBuf[byte_ctr] = SPI_RW(0);         // 连接读出数据
 140   1      
 141   1          RFCSN = 1;                          
 142   1      
 143   1          return(status);                         // 返回RF状态值
 144   1      }
 145          
 146          /**************************************************
 147          功能：把缓冲区的多字节数据写到RF寄存器
 148          **************************************************/
 149          uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes)
 150          {
 151   1        uint8_t status,byte_ctr;
 152   1      
 153   1          RFCSN = 0;                      
 154   1          status = SPI_RW(reg);             // 选择RF寄存器
 155   1          for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // 连接写入数据
 156   1            SPI_RW(*pBuf++);
 157   1          RFCSN = 1;                      
 158   1          return(status);                   // 返回RF状态值
 159   1      }
 160          /**************************************************
 161          功能：设置为掉电模式
 162          **************************************************/
 163          void PD_Mode(void)
 164          {
 165   1          RFCE=0;
 166   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0c);     // PWR_UP=0
 167   1      }
 168          
 169          /**************************************************
 170          功能：设置为接收模式
 171          **************************************************/
 172          void RX_Mode(void)
 173          {
 174   1          RFCE=0;
 175   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // 上电, CRC为2 bytes,接收模式,允许RX_DR产生中断
 176   1          RFCE = 1;                   // 启动接收模式
 177   1      }
 178          
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 4   

 179          /**************************************************
 180          功能：设置为发射模式
 181          **************************************************/
 182          void TX_Mode(void)
 183          {
 184   1        RFCE=0;
 185   1        SPI_RW_Reg(FLUSH_TX,0);               // 清除TX的FIFO
 186   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);           // 上电, CRC为2 bytes,接收模式,允许RX_DR产生中断    
 187   1        SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // 写数据到FIFO
 188   1        RFCE=1; 
 189   1      }
 190          /**************************************************
 191          功能：RF初始化
 192          **************************************************/
 193          void rf_init(void)
 194          {
 195   1          RFCE = 0;                                       // RF关闭
 196   1          RFCKEN = 1;                                     // 启动RF时钟
 197   1          RF = 1;                                         // 允许RF中断
 198   1        delay(1000);
 199   1      
 200   1          SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);     // 设置发射地址长度 
 201   1        SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, TX_ADR_WIDTH);  // 设置接收地址长度 
 202   1      
 203   1          SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);            // 启动自动应答功能
 204   1          SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);        // PIPE0接收数据
 205   1          SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a);       // 自动重传10次
 206   1          SPI_RW_Reg(WRITE_REG + RF_CH, 40);              // RF频率2440MHz
 207   1          SPI_RW_Reg(WRITE_REG + RF_SETUP, txpower);        // 配置发射功率txpower, 传输速率2Mbps,
 208   1          SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH);   // PIPE0 接收数据包长度   */  
 209   1      } 
 210          
 211          /**************************************************
 212          功能：RF中断服务程序
 213          **************************************************/
 214          void RF_IRQ(void) interrupt INTERRUPT_RFIRQ
 215          {
 216   1        sta=SPI_Read(STATUS);               // 读出状态值
 217   1        
 218   1        /***************************标签状态切换响应而添加***********************/
 219   1        if(RX_DR)                 
 220   1        {
 221   2          SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// 读出FIFO的数据
 222   2          SPI_RW_Reg(FLUSH_RX,0);             // 清除RX的FIFO
 223   2        }
 224   1        /*************************************************************************/
 225   1      
 226   1        SPI_RW_Reg(WRITE_REG+STATUS,0x70);          // 清除所有中断标志 
 227   1      }
 228          
 229          /**************************************************
 230          功能：随机数发生器初始化子程序
 231          **************************************************/
 232          //void rng_init(void)
 233          //{
 234          //   RNGCTL=0x80;               //启动随机数发生器
 235          //}
 236          
 237          /*配置电压报警寄存器*/
 238          void PWR_CONFIG()
 239          {
 240   1      POFCON|=0X80;//使能供电失败报警，配置比较电压为2.1v
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 5   

 241   1      }
 242          
 243          /*读取电源失败的原因*/
 244          unsigned char RD_POF()
 245          {
 246   1      return (POFCON&=0X10) ; //如果是0就是高，如是去1就是电压低于比较值
 247   1      }
 248          
 249          //读取写进去的ID
 250          void read_id_from_nvdata(void)
 251          {
 252   1      
 253   1      
 254   1        unsigned char id[ID_LENGTH];
 255   1        unsigned char i;
 256   1        for(i=0;i<ID_LENGTH;i++)
 257   1        {
 258   2          id[i] = XBYTE[ID_MEMORY_BASE+i];  
 259   2          
 260   2        //  hal_uart_putchar(id[i]);
 261   2        }
 262   1        if(id[8]!=0xA5)
 263   1        {
 264   2          //芯片没写入序列号，使用默认序列号或报错
 265   2          id[0]  =  0x01;
 266   2          id[1]  =  0x02;
 267   2          id[2]  =  0x03;
 268   2          id[3]  =  0x04;
 269   2          id[4]  =  0x05;
 270   2          id[5]  =  0x06;
 271   2          id[6]  =  0x07;
 272   2          id[7]  =  0x08;     
 273   2        }
 274   1        
 275   1        tx_buf[2]   = id[3] ;
 276   1        tx_buf[3]   = id[2] ;
 277   1        tx_buf[4]   = id[1] ;
 278   1        tx_buf[5]   = id[0] ;
 279   1        
 280   1        
 281   1      }
 282          
 283          /**************************************************
 284          功能：RTC2初始化
 285          **************************************************/
 286          void rtc2_init(void)
 287          {
 288   1        CLKLFCTRL=0x01;                     // 使用RC 32KHz时钟
 289   1        
 290   1        RTC2CMP0=0xFF;                    // 定时2秒
 291   1        if(SEND_CYCLE <=5)
 292   1        {
 293   2          RTC2CMP1=0x20;        //0X80--1S
 294   2        
 295   2        }
 296   1        else
 297   1        {
 298   2          RTC2CMP1=0xFF;        //0X80--1S
 299   2        }
 300   1      
 301   1        
 302   1        RTC2CON=0x06;                   // 比较模式
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 6   

 303   1        WUIRQ=1;                      // 允许TICK中断
 304   1      }
 305          /**************************************************
 306          功能：启动RTC2
 307          **************************************************/
 308          void rtc2_on(void)
 309          {
 310   1          //RTC2定时间隔配置
 311   1        RTC2CON |=0x01;                 
 312   1      }
 313          /**************************************************
 314          功能：关闭RTC2
 315          **************************************************/
 316          void rtc2_off(void)
 317          {                             
 318   1        RTC2CON &=~0x01;                    
 319   1      }
 320          /**************************************************
 321          功能：RTC2中断服务程序
 322          **************************************************/
 323          void RTC2_IRQ(void) interrupt INTERRUPT_TICK 
 324          {
 325   1        //LED2=!LED2;                       
 326   1      }                     
 327          /**************************************************
 328          功能:I/O口初始化
 329          **************************************************/
 330          void io_init(void)
 331          {
 332   1          P0DIR = p0dir;                  // 设定I/O口输入输出
 333   1          P1DIR = p1dir;                          
 334   1      }  
 335          
 336          /**************************************************
 337          功能：串口初始化子程序   *****调试用
 338          说明：波特率9600，使用内部波特率发生器
 339          **************************************************/
 340          //void uart_init(void)
 341          //{
 342          //    ES0 = 0;                              // 关UART0中断
 343          //    REN0 = 1;                             // 允许接收
 344          //    SM0 = 0;                              // 串口模式1，8bit可变波特率
 345          //    SM1 = 1;                   
 346          //    PCON |= 0x80;                         // SMOD = 1
 347          //  
 348          //    ADCON |= 0x80;                        // 选择内部波特率发生器
 349          //    S0RELL = 0xcc;                        // 波特率9600(十进制972=十六进制0x03cc
 350          //    S0RELH = 0x03;              
 351          //    TI0 = 0;                    // 清发送完成标志
 352          //  RI0=0;                       // 清接收完成标志
 353          //  S0BUF=0x99;                   // 送初值
 354          //}
 355          /**************************************************
 356          功能：向串口发送1 byte数据  *****调试用
 357          **************************************************/
 358          //void uart_putchar(uint8_t x)
 359          //{
 360          //  while (!TI0);               // 等待发送完成
 361          //  TI0=0;                    // 清发送完成标志
 362          //  S0BUF=x;                  // 发送数据
 363          //}
 364          
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 7   

 365          /**************************************************
 366          功能：NVM存储器多字节擦除/写入子程序
 367          说明：先擦除所在页，然后写入数据
 368          **************************************************/
 369          void hal_flash_bytes_write(uint16_t a,uint8_t *p,uint16_t n)
 370          {
 371   1         uint8_t xdata * data pb;
 372   1         if((a>=0xfa00)&&(a<=0xffff))    //NVM地址区
 373   1         {
 374   2           F0=EA;
 375   2         EA=0; 
 376   2         WEN=1;             //允许写入
 377   2         if((a>=0xfa00)&&(a<0xfc00))   //地址在NVM加长寿命区
 378   2         {
 379   3            FCR=32;                //必须擦出整数页（512字节）
 380   3          while(RDYN==1);
 381   3          FCR=33;
 382   3          while(RDYN==1);
 383   3         }
 384   2         if((a>=0xfc00)&&(a<=0xffff))      //地址在NVM普通寿命区
 385   2         {
 386   3           FCR=34;                   //擦除整页  
 387   3           while(RDYN==1);
 388   3         }
 389   2         if((a>=0xfe00)&&(a<=0xffff))      //地址在NVM普通寿命区
 390   2         {
 391   3           FCR=35;                   //擦除整页  
 392   3           while(RDYN==1);
 393   3         }
 394   2         delay(1000);
 395   2        
 396   2         pb=(uint8_t xdata *)a;
 397   2         while(n--)         //连续写入数据
 398   2         {
 399   3           *pb++=*p++;
 400   3           while(RDYN==1);
 401   3         }
 402   2         WEN=0;           //写完，禁止写
 403   2         EA=F0;             //恢复中断
 404   2         }
 405   1      }
 406          
 407          
 408          
 409          //设置发射功率+唯一标志  1字节+3字节
 410          void set_rf_txpower (void)
 411            {
 412   1          if((rx_buf[5]==0x0f)||(rx_buf[5]==0x0d)||(rx_buf[5]==0x0b)||(rx_buf[5]==0x09))                
 413   1            { 
 414   2      //        txpower = rx_buf[5]; 
 415   2      //        
 416   2      //        rf_init();  
 417   2          
 418   2              hal_flash_bytes_write(eddr,rx_buf +4,28);               
 419   2            }
 420   1        }
 421          
 422          
 423          /****************
 424          /
 425          /nRF24LE1的低功耗模式设置
 426          /
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 8   

 427          ****************/
 428          void  Low_Power_IO_Set(void)
 429          {
 430   1      
 431   1        P0CON = 0x70;  //P0.0设置为数字输入缓冲关模式
 432   1        P0CON = 0x71;  //P0.1设置为数字输入缓冲关模式
 433   1        P0CON = 0x72;  //P0.2设置为数字输入缓冲关模式
 434   1        P0CON = 0x73;  //P0.3设置为数字输入缓冲关模式
 435   1        P0CON = 0x74;  //P0.4设置为数字输入缓冲关模式
 436   1        P0CON = 0x75;  //P0.5设置为数字输入缓冲关模式
 437   1        P0CON = 0x76;  //P0.6设置为数字输入缓冲关模式
 438   1        P0CON = 0x77;  //P0.7设置为数字输入缓冲关模式
 439   1        P0DIR = 0xFF;  //P0.0~P0.7方向设置为输入
 440   1        
 441   1        
 442   1        P1CON = 0x70;  //P1.0设置为数字输入缓冲关模式
 443   1        P1CON = 0x71;  //P1.1设置为数字输入缓冲关模式
 444   1        P1CON = 0x72;  //P1.2设置为数字输入缓冲关模式
 445   1        P1CON = 0x73;  //P1.3设置为数字输入缓冲关模式
 446   1        P1CON = 0x74;  //P1.4设置为数字输入缓冲关模式
 447   1        P1CON = 0x75;  //P1.5设置为数字输入缓冲关模式
 448   1        P1CON = 0x76;  //P1.6设置为数字输入缓冲关模式
 449   1      
 450   1        P1DIR = 0x7F;  //P1.0~P1.6方向设置为输入
 451   1      
 452   1      }
 453            
 454          
 455          /**************************************************
 456          功能：主程序
 457          **************************************************/
 458          void main(void)
 459          { 
 460   1        
 461   1        uint16_t  cycle = 0 ,jj = 0;
 462   1        
 463   1        uint8_t   i = 0, j=0 , k=0 ,kk = 0;
 464   1      
 465   1        io_init();                  // I/O口初始化
 466   1      
 467   1        LED0=1;            //点灯
 468   1        
 469   1      //  P1DIR = 0XFF;      //配置成输入
 470   1        
 471   1        PWR_CONFIG();   /*配置电压报警寄存器*/
 472   1        
 473   1        read_id_from_nvdata();    //读取写进去的ID
 474   1        
 475   1        //配置初始发射功率
 476   1        if(XBYTE[eddr+0]==0xAA)   
 477   1        {
 478   2         txpower=XBYTE[eddr+1]; 
 479   2          
 480   2          for( i = 0 ; i < 26 ; i ++)
 481   2          {
 482   3            tx_buf[i + 6 ]   =  XBYTE[eddr + 2 + i];
 483   3          }
 484   2        }   
 485   1        else 
 486   1        {
 487   2      
 488   2          
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 9   

 489   2         //    txpower=XBYTE[eddr+0]; 
 490   2          
 491   2          for( i = 0 ; i < 26 ; i ++)
 492   2            {
 493   3              tx_buf[i + 6 ]   =  0;
 494   3            } 
 495   2        }  
 496   1        
 497   1        tx_buf[0] =  txpower ;     //信号强度
 498   1        
 499   1        rf_init();                  // RF初始化                            
 500   1        EA=1;                       // 允许中断  
 501   1        rtc2_init();                // RTC2初始化
 502   1            
 503   1        if(RD_POF())           //检测反馈当前的供电的电压情况  
 504   1          { 
 505   2          tx_buf[1]  = 0x00 ;     //低压
 506   2          }
 507   1        else
 508   1         {
 509   2          tx_buf[1]  = 0x80 ;
 510   2         }
 511   1         
 512   1         RX_Mode();       //进入接收模式
 513   1         
 514   1        while(1)
 515   1        {
 516   2      
 517   2            rtc2_off();               // 关RTC2 
 518   2          
 519   2          if(jj >1500)
 520   2          {
 521   3                
 522   3            
 523   3            
 524   3            
 525   3          /**********************状态1：常规主动发送（休眠-接收-发送）************************/
 526   3       
 527   3             sta=0; 
 528   3             delay(10);
 529   3           
 530   3            TX_Mode();                // 发射本TAG有源ID数据        
 531   3               while (!(TX_DS|MAX_RT));       // 等待发射结束     
 532   3            sta = 0;        
 533   3            
 534   3            PD_Mode();                // 关RF
 535   3                    
 536   3            if(!kk) {   kk ++;  }   
 537   3              
 538   3            tx_buf[1]  |= kk ;     // 
 539   3                      
 540   3            if(cycle>=SEND_CYCLE)    //2s/次 150 5分钟    
 541   3              { 
 542   4              
 543   4                Low_Power_IO_Set();
 544   4                
 545   4                OPMCON |= 0x02;          //I/O状态锁存
 546   4                
 547   4                PWRDWN = 0x01;           //进入深度睡眠模式，唤醒会导致复位
 548   4              } 
 549   3        
 550   3             else
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 10  

 551   3             {      
 552   4                  cycle ++ ;
 553   4               
 554   4                  rtc2_on();                // 开RTC2      
 555   4                       
 556   4                  Low_Power_IO_Set();
 557   4               
 558   4                  PWRDWN = 0x04;              // 进入低功耗模式3.2uA，寄存器维持，clklf来自RCOSC32K，等待RTC2唤醒        
 559   4             }  
 560   3          }
 561   2          else
 562   2          {
 563   3            
 564   3            jj ++;
 565   3            delay(1);
 566   3          
 567   3            if(RX_DR)               // 数据已收到
 568   3              {         
 569   4                sta = 0;
 570   4                
 571   4              if(((rx_buf[0]==tx_buf[2])&&(rx_buf[1]==tx_buf[3])&&(rx_buf[2]==tx_buf[4])&&(rx_buf[3]==tx_buf[5]))||(
             -(rx_buf[0]==0xFF)&&(rx_buf[1]==0xFF)&&(rx_buf[2]==0xFF)&&(rx_buf[3]==0xFF)))        
 572   4                { 
 573   5                            
 574   5                  switch (rx_buf[4]) //处理命令
 575   5                    {
 576   6                      
 577   6                          case 0xAA: set_rf_txpower();                     break;     //设置发射功率
 578   6          //                case 0x02: GetVersion();                      break;     //读取版本信息
 579   6          //                case 0x03: SetMachno();                       break;     //设置机号
 580   6          //                case 0x04: GetMachno();                       break;     //读取机号   
 581   6          //                case 0x05: SetTime();                         break;     //设置时间
 582   6                      
 583   6                          default:  break;
 584   6                    }       
 585   5                } 
 586   4                
 587   4              } 
 588   3          
 589   3          }
 590   2        
 591   2            /*************************** 状态2：被动接收（休眠-接收）******************************/
 592   2      //      if(rx_buf[0]==0x22)               // 数据已收到
 593   2      //      { 
 594   2      //      sta=0;
 595   2      //      delay(15);
 596   2      //      PD_Mode();                // 关RF
 597   2      //        rtc2_on();                // 开RTC2
 598   2      //        PWRDWN = 0x04;              // 进入低功耗模式，等待RTC2唤醒
 599   2      //        RX_Mode(); 
 600   2      //      memrx=0x22; 
 601   2      //        
 602   2      //        
 603   2      //        
 604   2      //      }
 605   2      
 606   2            /*****************接收射频功率配置指令,配置标签发射功率,并写入NVM存储区****************/
 607   2            /******************  0x0f:0dBm 
 608   2                                 0x0d:-6dBm
 609   2                       0x0b:-12dBm
 610   2                       0x09:-18dBm  *****************/
 611   2      //      if((rx_buf[0]==0x0f)||(rx_buf[0]==0x0d)||(rx_buf[0]==0x0b)||(rx_buf[0]==0x09))                
C51 COMPILER V9.56.0.0   MAIN                                                              08/05/2020 13:35:37 PAGE 11  

 612   2      //      { 
 613   2      //      sta=0;
 614   2      //      txpower=rx_buf[0]; 
 615   2      //      rf_init();                                          
 616   2      //      hal_flash_bytes_write(eddr,&txpower,1);
 617   2      //      rx_buf[0]=memrx;
 618   2      //      }
 619   2      //    }
 620   2        }
 621   1      }                     
 622          
 623          
*** WARNING C294 IN LINE 298 OF Main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1140    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     16      35
   DATA SIZE        =     67       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
